var sys = require('sys');
var redis = require('../lib/redis');

var debug;
var debugLevel = parseInt(process.env.NODE_DEBUG, 16);
if(debugLevel & 0x4) {
    debug = function (x) { sys.error('redis: ' + x); };
} else {
    debug = function () { };
}

function Client () {
    redis.Client.call(this);
    var self = this;

    self.type = null;
    self.mbulklen = null;
    self.bulklen = null;
    self.bulkcount = null;

    self.buf = new Buffer(8192);
    self.buflen = 0;

    self._emit = [];

    self.onRR = null;
    self.onRREnd = null;

    self.on("requestItem", function (data) {
	debug("requestItem");
    });
    self.on("requestEnd", function () {
	debug("requestEnd");
    });
};
sys.inherits(Client, redis.Client);
exports.Client = Client;

Client.prototype.request = function (req) {
    if (!req || !req.q) return;
    for (var i = 0; i < req.q.length; i++) {
	var q = req.q[i];
	this.query("lrange", ["ndns", "question", q.name], 0, -1);
	this._emit.push("requestItem");
    }
    this._emit.push("requestDone");
};

Client.prototype.add = function (zone, name, type) {
    if (ndns.ns_t[type.toString().toLowerCase()]) {
	type = ndns.ns_t[type.toString().toLowerCase()];
    }
    this.query("lpush", ["ndns", "question", q.name], 0, -1);
    this._emit.push("add");
};

Client.prototype.onCommandType = function (commandType) {
    debug('Client.prototype.onCommandType');
    this.type = commandType;
};
Client.prototype.onMBulkLength = function (len) {
    debug('Client.prototype.onMBulkLength');
    this.mbulklen = len;
    this.emit("mbulk", this.mbulklen);
};
Client.prototype.onBulkLength = function (len) {
    debug('Client.prototype.onBulkLength');
    this.buflen = 0;
    this.bulklen = len;
    this.emit("bulk", this.bulklen);
};
Client.prototype.onData = function (b, start, end) {
    debug('Client.prototype.onData');
    debug('data: ' + b.toString("utf8", start, end));
    for (var i = start; i < end && this.buflen < this.buf.length; i++) {
	this.buf[this.buflen++] = b[i];
    }
};
Client.prototype.onDataEnd = function () {
    debug('Client.prototype.onDataEnd');
    if (this.mbulklen) {
	this.emit(this._emit[0], this.buf);
    } else {
	this.emit(this._emit.shift(), this.buf.slice(0, this.buflen));
    }
    this.buflen = 0;
    this.bulklen = null;
};
Client.prototype.onMBulkEnd = function () {
    debug('Client.prototype.onMBulkEnd');
    this._emit.shift();
    this.emit(this._emit.shift());
    this.mbulklen = null;
    this.emit("end");
};

exports.createClient = function (port, host) {
    var c = new Client();
    c.port = port;
    c.host = host;
    return c;
};
