var sys = require('sys');
var redis = require('../lib/redis');

var debug;
var debugLevel = parseInt(process.env.NODE_DEBUG, 16);
if(debugLevel & 0x4) {
    debug = function (x) { sys.error('redis: ' + x); };
} else {
    debug = function () { };
}

var buf = new Buffer (8192);
var start = 0;
var end = 0;

var Reader = new redis.Parser();

var type = null, mbulklen = null, bulklen = null, data = "", mbulk = [];

Reader.onCommandType = function (commandType) {
    debug('Reader.onCommandType');
    switch (type) {
    case this.commandType_error:
	debug("type: error");
	break;
    case this.commandType_singleline:
	debug("type: single line");
	break;
    case this.commandType_bulk:
	debug("type: bulk");
	break;
    case this.commandType_mbulk:
	debug("type: mbulk");
	break;
    case this.commandType_integer:
	debug("type: integer");
	break;
    }
    type = commandType;
};
Reader.onMBulkLength = function (len) {
    debug('Reader.onMBulkLength');
    mbulklen = len;
};
Reader.onBulkLength = function (len) {
    debug('Reader.onBulkLength');
    bulklen = len;
};
Reader.onData = function (b, start, end) {
    debug('Reader.onData');
    data += b.toString('ascii', start, end);
};
Reader.onMBulkEnd = function () {
    debug('Reader.onMBulkEnd');
    mbulklen = null;
    while (mbulk.length) mbulk.pop();
};

var expectData = ["10123456", "OK", "foobar", "barfoo", "OK"];
Reader.onDataEnd = function () {
    debug('Reader.onDataEnd');
    if (expectData.shift() != data) {
	throw new Error();
    }
    data = "";
};
r
end = buf.write (":10123");
Reader.parse(buf, start, end);
end = buf.write ("456\r\n");
Reader.parse(buf, start, end);
end = buf.write ("+OK\r\n");
Reader.parse(buf, start, end);
end = buf.write ("*1\r\n");
Reader.parse(buf, start, end);
end = buf.write ("$6\r\nfoo");
Reader.parse(buf, start, end);
end = buf.write ("ba");
Reader.parse(buf, start, end);
end = buf.write ("r\r\n");
Reader.parse(buf, start, end);
end = buf.write ("$6\r\nbarfoo\r\n");
Reader.parse(buf, start, end);
end = buf.write ("+O");
Reader.parse(buf, start, end);
end = buf.write ("K\r\n");
Reader.parse(buf, start, end);
