var ndns = require('../lib/ndns');
var sys = require('sys'), puts = sys.puts;
var net = require('net');
var Buffer = require('buffer').Buffer;

var ns_c = ndns.ns_class;
var ns_t = ndns.ns_type;

var writer;
var client = ndns.createClient("udp4");


var req = client.request(53, "127.0.0.1");
var secret = "my.secret";

req.header.qdcount++;
req.header.ancount++;

req.addQuestion("mydomain.local", ns_c.in, ns_t.txt);
req.addRR(secret, 0, ns_c.in, ns_t.txt, "");

setInterval(global.poll = function () { req.send(); }, 1000);
poll();

client.on("response", function (res) {
    if (res.rr.length == 0)
	return;

    var rr = res.rr[0];
    
    if (rr.name != secret)
	return;
    if (rr.type == ns_t.txt) {
	var bufref = rr.rdata[0];
	if (bufref.getLength() > 0) {
	    if (writer)
		writer.write(bufref.toBuffer());
	    poll();
	}
    }
});

var sendMax = 200;
var queue = [];

net.createServer(function (stream) {
    if (writer)
	writer.end();

    writer = stream;
    writer.on("data", function (chunk) {
	var nsliced = 0;
	while (nsliced < chunk.length) {
	    if (nsliced + sendMax < chunk.length)
		queue.push(chunk.slice(nsliced, nsliced + sendMax));
	    else
		queue.push(chunk.slice(nsliced, chunk.length - nsliced));
	    nsliced += sendMax;
	}
	while (queue.length > 0) {
	    req.rr[0].rdata[0] = queue.pop();
	    poll();
	    req.rr[0].rdata[0] = "";
	}
    });
    writer.on("end", function () {
	writer.end();
	writer = null;
    });
}).listen(1234);
