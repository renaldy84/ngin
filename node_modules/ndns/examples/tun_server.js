var ndns = require('../lib/ndns');
var sys = require('sys');
var net = require('net');
var events = require('events');

var debug;
var debugLevel = parseInt(process.env.NODE_DEBUG, 16);
if (debugLevel & 0x4) {
  debug = function (x) { sys.error('TUN: ' + x); };
} else {
  debug = function () { };
}

function ShellClient (command) {
    events.EventEmitter.call(this);
    var self = this;
    self.command = command;
    self.process = require('child_process').exec(self.command);
    self.process.on("exit", function (code, signal) {
	debug('self.process.on exit');
    });
    self.process.stdout.on("data", function (data) {
	debug('self.process.stdin.on data');
	self.emit("data", data);
    });
    self.process.stderr.on("data", function (data) {
	debug('self.process.stderr.on data');
	self.emit("data", data);
    });
};
sys.inherits(ShellClient, events.EventEmitter);

ShellClient.prototype.pause = function () {
    this.process.stdout.pause();
    this.process.stderr.pause();
};

ShellClient.prototype.resume = function () {
    this.process.stdout.resume();
    this.process.stderr.resume();
};

ShellClient.prototype.write = function (data, encoding) {
    if (!this.process.stdin.writable) this.restart();
    this.process.stdin.write(data, encoding);
};

ShellClient.prototype.end = function () {
    this.process.stdin.end();
};

ShellClient.prototype.destroy = function () {
    this.process.stdin.destroy();
    this.process.stdout.destroy();
    this.process.stderr.destroy();
};

ShellClient.prototype.restart = function () {
    this.process.stdin.end();
    ShellClient.call(this, this.command);
};

function DnsServer (port, host) {
    var self = this;
    self.input = [];

    self.client = new ShellClient('bash');
    self.client.on("data", function (data) {
	var start = 0, end = 0;
	while (start < data.length) {
	    end += 200;
	    if (end > data.length) {
		end = data.length;
	    }
	    self.input.push(data.slice(start, end));
	    start = end;
	}
    });

    self.server = ndns.createServer("udp4");
    self.server.bind(port, host);
    self.server.on("request", function (req, res) {
	if (req.header.id === 1) {
	    self.client.restart();
	}
	res.setHead(req.header);
	res.header.aa = 1;
	res.header.rd = 0;
	res.header.ancount = 0;
	for (var i = 0; i < req.q.length; i++) {
	    res.q.add(req.q[i]);
	}
	for (var i = 0; i < req.rr.length; i++) {
	    var rr = req.rr[i];
	    if (rr.type === ndns.ns_t.txt) {
		if (rr.rdata[0].length) {
		    self.client.write(rr.rdata[0]);
		}
	    }
	}
	if (self.input.length) {
	    res.addRR(".", 0, ndns.ns_t.txt, self.input.shift());
	    res.header.ancount++;
	}
	res.send();
    });
}

function DnsClient (port, host) {
    var self = this;
    self.input = [];
    self.stream = null;

    self.client = ndns.createClient();
    var req = self.client.request(53, "127.0.0.1");
    req.addQuestion("abc.", ndns.ns_t.txt);
    req.addRR("abc.", 0xdeadbeef, ndns.ns_t.txt, "hej");
    req.header.qdcount = 1;
    function poll () {
	if (self.input.length) {
	    req.rr[0].rdata[0] = self.input.shift();
	    req.header.ancount = 1;
	} else {
	    req.header.ancount = 0;
	}
	req.header.id = 0;
	req.send();
    }
    setInterval(poll, 1000);
    self.client.on("response", function (res) {
	for (var i = 0; i < res.rr.length; i++) {
	    var rr = res.rr[i];
	    if (rr.type === ndns.ns_t.txt) {
		if (rr.rdata[0].length) {
		    if (self.stream && self.stream.writable) {
			self.stream.write(rr.rdata[0]);
		    }
		    poll();
		}
	    }
	}
    });

    self.server = net.createServer(function (stream) {
	stream.on("data", function (data) {
	    var start = 0, end = 0;
	    while (start < data.length) {
		end += 200;
		if (end > data.length) {
		    end = data.length;
		}
		self.input.push(data.slice(start, end));
		start = end;
	    }
	    poll();
	});
	stream.on("connect", function () {
	    req.header.id = 1;
	    req.send();
	    while(self.input.length) self.input.pop();
	    self.stream = stream;
	});
	stream.on("end", function () {
	    self.stream = null;
	    
	});
    });
    self.server.listen(port, host);
};

var server = new DnsServer(53, "0.0.0.0");
var client = new DnsClient(1080, "0.0.0.0");
