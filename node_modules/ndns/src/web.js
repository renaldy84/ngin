var sys = require('sys');
var http = require('http');
var url = require('url');
var redis = require('../lib/redis');

var debug;
var debugLevel = parseInt(process.env.NODE_DEBUG, 16);
if(debugLevel & 0x4) {
    debug = function (x) { sys.error('redis: ' + x); };
} else {
    debug = function () { };
}

var type = null, mbulklen = null, bulklen = null;
var data = "";

var db = redis.createClient(6379, "127.0.0.1");
db.onCommandType = function (commandType) {
    debug('db.onCommandType');
    type = commandType;
};
db.onMBulkLength = function (len) {
    debug('db.onMBulkLength');
    mbulklen = len;
};
db.onBulkLength = function (len) {
    debug('db.onBulkLength');
    bulklen = len;
};
db.onData = function (b, start, end) {
    debug('db.onData');
    data += b.toString("ascii", start, end);
};
db.onDataEnd = function () {
    debug('db.onDataEnd');
    debug('data: ' + data);
    data = "";
    bulklen = null;
};
db.onMBulkEnd = function () {
    debug('db.onMBulkEnd');
    mbulklen = null;
};

var NOT_FOUND = "Not Found\n";

function notFound(req, res) {
    res.writeHead(404, [ ["Content-Type", "text/plain"]
			 , ["Content-Length", NOT_FOUND.length]
                       ]);
    res.end(NOT_FOUND);
}

var getMap = {};

function get (path, handler) {
    getMap[path] = handler;
}

http.createServer(function (req, res) {
    if (req.method === "GET") {
	var pathname = url.parse(req.url).pathname;
	var handler = getMap[pathname] || notFound;
	res.simpleText = function (code, body) {
	    res.writeHead(code, [ ["Content-Type", "text/plain"]
				  , ["Content-Length", body.length]
				]);
	    res.end(body);
	};
	res.simpleJSON = function (code, obj) {
	    var body = JSON.stringify(obj);
	    res.writeHead(code, [ ["Content-Type", "text/json"]
				  , ["Content-Length", body.length]
				]);
	    res.end(body);
	};
	
	handler(req, res);
    }
}).listen(8080);

