var sys = require('sys');
var ndns = require('../lib/ndns');
var sys = require('sys');
var redis = require('../lib/redis');

var server = ndns.createServer('udp4');

var debug;
var debugLevel = parseInt(process.env.NODE_DEBUG, 16);
if(debugLevel & 0x4) {
    debug = function (x) { sys.error('redis: ' + x); };
} else {
    debug = function () { };
}

function Client () {
    redis.Client.call(this);
    var self = this;

    self.type = null;
    self.mbulklen = null;
    self.bulklen = null;

    self.buf = new Buffer(8192);
    self.buflen = 0;
};
sys.inherits(Client, redis.Client);
exports.Client = Client;

Client.prototype.onCommandType = function (commandType) {
    debug('Client.prototype.onCommandType');
    this.type = commandType;
};

Client.prototype.onMBulkLength = function (len) {
    debug('Client.prototype.onMBulkLength');
    this.mbulklen = len;
};

Client.prototype.onBulkLength = function (len) {
    debug('Client.prototype.onBulkLength');
    this.buflen = 0;
    this.bulklen = len;
};

Client.prototype.onData = function (b, start, end) {
    debug('Client.prototype.onData');
    debug('data: ' + b.toString("utf8", start, end));
    for (var i = start; i < end && this.buflen < this.buf.length; i++) {
	this.buf[this.buflen++] = b[i];
    }
};

Client.prototype.onDataEnd = function () {
    debug('Client.prototype.onDataEnd');
    if (this.mbulklen) {
	
    } else {
	
    }
    this.buflen = 0;
    this.bulklen = null;
};

Client.prototype.onMBulkEnd = function () {
    debug('Client.prototype.onMBulkEnd');
    this.mbulklen = null;
};

Client.prototype.handle = function (req, res) {
    debug(sys.inspect(req));
};

var createClient = function (port, host) {
    var c = new Client();
    c.port = port;
    c.host = host;
    return c;
};

exports.options = {
    port: "5300",
    listen_on: [ "127.0.0.1" ],
    listen_on_v6: [ "::1" ],
    recursion: "no",
};

function Server () {
    ndns.Server.apply(this, arguments);
    var self = this;
    self.db = createClient();
    self.on("request", function (req, res) {
	self.db.handle(req, res);
    });
};
sys.inherits(Server, ndns.Server);

exports.Server = Server;

Server.prototype.add = function () { };

exports.createServer = function () {
    var type = "udp4";
    var requestListener;
    if (arguments.length) {
	type = arguments[0];
	if (typeof arguments[1] === "function") {
	    requestListener = arguments[1];
	}
    }
    return new Server (type, requestListener);
};

